import { Resend } from 'resend';

// Validar que la API key est√© configurada
if (!process.env.RESEND_API_KEY) {
  console.warn('‚ö†Ô∏è RESEND_API_KEY no est√° configurada. Los emails no se enviar√°n.');
}

// Crear instancia de Resend solo si la API key est√° disponible
export const resend = process.env.RESEND_API_KEY 
  ? new Resend(process.env.RESEND_API_KEY)
  : null;

// Funci√≥n para verificar si Resend est√° configurado
export function isResendConfigured(): boolean {
  return !!process.env.RESEND_API_KEY;
}

// Funci√≥n para enviar email con validaci√≥n y fallback
export async function sendEmailWithResend(params: {
  to: string;
  subject: string;
  html: string;
}) {
  if (!resend) {
    console.warn('‚ö†Ô∏è Resend no est√° configurado. Email no enviado:', params.subject);
    return null;
  }

  try {
    // Determinar el remitente basado en el entorno
    const fromAddress = getFromAddress();
    
    const { data, error } = await resend.emails.send({
      from: fromAddress,
      to: [params.to],
      subject: params.subject,
      html: params.html,
    });

    if (error) {
      console.error('‚ùå Error enviando email:', error);
      
      // Si es error de dominio no verificado, usar fallback
      if (error.message?.includes('domain') || 
          error.message?.includes('verification') || 
          error.message?.includes('testing emails') ||
          error.message?.includes('own email address')) {
        console.log('üîÑ Intentando con dominio de fallback...');
        return await sendEmailWithFallback(params);
      }
      
      throw error;
    }

    console.log('‚úÖ Email enviado exitosamente:', params.subject);
    return data;
  } catch (error) {
    console.error('‚ùå Error enviando email con Resend:', error);
    
    // Intentar con fallback si es posible
    if (error.message?.includes('domain') || 
        error.message?.includes('verification') || 
        error.message?.includes('testing emails') ||
        error.message?.includes('own email address')) {
      console.log('üîÑ Intentando con dominio de fallback...');
      return await sendEmailWithFallback(params);
    }
    
    throw error;
  }
}

// Funci√≥n para determinar la direcci√≥n de env√≠o
function getFromAddress(): string {
  const isProduction = process.env.NODE_ENV === 'production';
  const isDomainVerified = process.env.RESEND_DOMAIN_VERIFIED === 'true';
  
  if (isProduction && isDomainVerified) {
    return 'Agendalook <noreply@agendalook.cl>';
  } else {
    return 'Agendalook <noreply@resend.dev>';
  }
}

// Funci√≥n de fallback para cuando el dominio no est√° verificado
async function sendEmailWithFallback(params: {
  to: string;
  subject: string;
  html: string;
}) {
  try {
    const { data, error } = await resend.emails.send({
      from: 'Agendalook <noreply@resend.dev>',
      to: [params.to],
      subject: params.subject,
      html: params.html,
    });

    if (error) {
      console.error('‚ùå Error con fallback tambi√©n:', error);
      throw error;
    }

    console.log('‚úÖ Email enviado con fallback:', params.subject);
    return data;
  } catch (error) {
    console.error('‚ùå Error con fallback:', error);
    throw error;
  }
} 